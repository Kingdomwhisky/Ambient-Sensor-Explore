C51 COMPILER V8.12   RL6432_SERIES_COLOROUTPUTGAMMAADJUST                                  05/25/2022 15:41:28 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE RL6432_SERIES_COLOROUTPUTGAMMAADJUST
OBJECT MODULE PLACED IN .\Output\RL6432_Series_ColorOutputGammaAdjust.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\RL6432_Series_Color\RL6432_Series_ColorOutputGammaAdjust.c LARGE OPTIM
                    -IZE(9,SPEED) INCDIR(..\..\..\Common;..\Header;.\Header;..\..\ScalerFunction\Lib\Header;..\..\ScalerFunction\Header;..\..
                    -\ScalerCommonFunction\Lib\Header;..\..\ScalerCommonFunction\Header;..\..\RL6432_Series_Common\Lib\Header;..\..\RL6432_Se
                    -ries_Common\Header) DEFINE(_TRANSLATOR_SUPPORT=_OFF,_SCALER_TYPE=_RL6432_SERIES) DEBUG OBJECTEXTEND PRINT(.\Output\RL643
                    -2_Series_ColorOutputGammaAdjust.lst) OBJECT(.\Output\RL6432_Series_ColorOutputGammaAdjust.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2012>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : RL6432_Series_ColorOutputGammaAdjust.c
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          #include "RL6432_Series_ColorLibInternalInclude.h"
  20          
  21          //****************************************************************************
  22          // DEFINITIONS / MACROS
  23          //****************************************************************************
  24          #define _GAMMA_TABLE_SIZE                       2052
  25          #define _GAMMA_WRITE_TO_SRAM                    0
  26          #define _GAMMA_WRITE_TO_LATCH                   1
  27          
  28          //****************************************************************************
  29          // STRUCT / TYPE / ENUM DEFINITTIONS
  30          //****************************************************************************
  31          
  32          
  33          //****************************************************************************
  34          // CODE TABLES
  35          //****************************************************************************
  36          
  37          
  38          //****************************************************************************
  39          // VARIABLE DECLARATIONS
  40          //****************************************************************************
  41          
  42          
  43          //****************************************************************************
  44          // FUNCTION DECLARATIONS
  45          //****************************************************************************
  46          void ScalerColorOutputGammaAdjust(BYTE *pucGammaTableArray, BYTE ucBankNum);
  47          void ScalerColorOutputGammaAdjustRGBValue(BYTE *pucGammaTableArray);
  48          
  49          //****************************************************************************
  50          // FUNCTION DEFINITIONS
  51          //****************************************************************************
C51 COMPILER V8.12   RL6432_SERIES_COLOROUTPUTGAMMAADJUST                                  05/25/2022 15:41:28 PAGE 2   

  52          //--------------------------------------------------
  53          // Description  : Adjust output gamma
  54          // Input Value  : SelRegion ans Gamma Table and Gamma Table Banks and Table Length
  55          // Output Value : None
  56          //--------------------------------------------------
  57          void ScalerColorOutputGammaAdjust(BYTE *pucGammaTableArray, BYTE ucBankNum)
  58          {
  59   1          if(ScalerGetBit(P0_67_GAMMA_CTRL_SETA, _BIT6) == _BIT6) // Gamma On
  60   1          {
  61   2              ScalerTimerWaitForEvent(_EVENT_DEN_STOP);
  62   2              ScalerColorOutputGammaEnable(_FUNCTION_OFF);
  63   2      
  64   2              // Load gamma table of R Channel
  65   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_RED_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
  66   2              ScalerBurstWrite(pucGammaTableArray, _GAMMA_TABLE_SIZE, ucBankNum, P0_66_GAMMA_PORT_SETA, _BURSTWR
             -ITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
  67   2      
  68   2              // Load gamma table of G Channel
  69   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_GREEN_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
  70   2              ScalerBurstWrite(pucGammaTableArray + _GAMMA_TABLE_SIZE, _GAMMA_TABLE_SIZE, ucBankNum, P0_66_GAMMA
             -_PORT_SETA, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
  71   2      
  72   2              // Load gamma table of B Channel
  73   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_BLUE_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
  74   2              ScalerBurstWrite(pucGammaTableArray + (_GAMMA_TABLE_SIZE * 2), _GAMMA_TABLE_SIZE, ucBankNum, P0_66
             -_GAMMA_PORT_SETA, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
  75   2      
  76   2              // Disable Port Access
  77   2              ScalerSetBit(P0_67_GAMMA_CTRL_SETA, ~_BIT7, 0x00);
  78   2      
  79   2              ScalerTimerWaitForEvent(_EVENT_DEN_STOP);
  80   2              ScalerColorOutputGammaEnable(_FUNCTION_ON);
  81   2          }
  82   1          else
  83   1          {
  84   2              // Load gamma table of R Channel
  85   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_RED_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
  86   2              ScalerBurstWrite(pucGammaTableArray, _GAMMA_TABLE_SIZE, ucBankNum, P0_66_GAMMA_PORT_SETA, _BURSTWR
             -ITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
  87   2      
  88   2              // Load gamma table of G Channel
  89   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_GREEN_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
  90   2              ScalerBurstWrite(pucGammaTableArray + _GAMMA_TABLE_SIZE, _GAMMA_TABLE_SIZE, ucBankNum, P0_66_GAMMA
             -_PORT_SETA, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
  91   2      
  92   2              // Load gamma table of B Channel
  93   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_BLUE_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
  94   2              ScalerBurstWrite(pucGammaTableArray + (_GAMMA_TABLE_SIZE * 2), _GAMMA_TABLE_SIZE, ucBankNum, P0_66
             -_GAMMA_PORT_SETA, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
  95   2      
  96   2              // Disable Port Access
  97   2              ScalerSetBit(P0_67_GAMMA_CTRL_SETA, ~_BIT7, 0x00);
  98   2          }
  99   1      }
 100          
 101          //--------------------------------------------------
 102          // Description  : Adjust output gamma
 103          // Input Value  : SelRegion ans Gamma Table and Gamma Table Banks and Table Length
 104          // Output Value : None
 105          //--------------------------------------------------
 106          // (_BEACON_GAMMA_AUTO_PROCESS_SUPPORT == _ON)
 107          void ScalerColorOutputGammaAdjustRGBValue(BYTE *pucGammaTableArray)
C51 COMPILER V8.12   RL6432_SERIES_COLOROUTPUTGAMMAADJUST                                  05/25/2022 15:41:28 PAGE 3   

 108          {
 109   1              WORD uCount;
 110   1          
 111   1          //if(ScalerGetBit(P0_67_GAMMA_CTRL_SETA, _BIT6) == _BIT6) // Gamma On
 112   1          {
 113   2              ScalerTimerWaitForEvent(_EVENT_DEN_STOP);
 114   2              //ScalerColorOutputGammaEnable(_FUNCTION_OFF);
 115   2      
 116   2              // Load gamma table of R Channel
 117   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_RED_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
 118   2              for(uCount=0;uCount<_GAMMA_TABLE_SIZE/2;uCount++)
 119   2              {
 120   3                      ScalerBurstWrite(pucGammaTableArray, 2, GET_CURRENT_BANK_NUMBER(), P0_66_GAMMA_PORT_SETA, _BURSTW
             -RITE_DATA_COMMON, _BURSTWRITE_FROM_XRAM);
 121   3              }
 122   2              
 123   2              // Load gamma table of G Channel
 124   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_GREEN_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
 125   2              for(uCount=0;uCount<_GAMMA_TABLE_SIZE/2;uCount++)
 126   2              {
 127   3                      ScalerBurstWrite(pucGammaTableArray + 2, 2, GET_CURRENT_BANK_NUMBER(), P0_66_GAMMA_PORT_SETA, _BU
             -RSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_XRAM);
 128   3              }
 129   2      
 130   2              // Load gamma table of B Channel
 131   2              ScalerColorOutputGammaChannelCtrl(_GAMMA_BLUE_CHANNEL, 0x0000, _GAMMA_WRITE_TO_SRAM);
 132   2              for(uCount=0;uCount<_GAMMA_TABLE_SIZE/2;uCount++)
 133   2              {
 134   3                      ScalerBurstWrite(pucGammaTableArray + 4, 2, GET_CURRENT_BANK_NUMBER(), P0_66_GAMMA_PORT_SETA, _BU
             -RSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_XRAM);
 135   3              }
 136   2              // Disable Port Access
 137   2              ScalerSetBit(P0_67_GAMMA_CTRL_SETA, ~_BIT7, 0x00);
 138   2      
 139   2              ScalerTimerWaitForEvent(_EVENT_DEN_STOP);
 140   2              ScalerColorOutputGammaEnable(_FUNCTION_ON);
 141   2          }
 142   1          
 143   1      }
 144          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    446    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
