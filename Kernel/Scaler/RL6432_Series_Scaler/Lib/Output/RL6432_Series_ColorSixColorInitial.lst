C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORINITIAL                                    05/25/2022 15:41:33 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE RL6432_SERIES_COLORSIXCOLORINITIAL
OBJECT MODULE PLACED IN .\Output\RL6432_Series_ColorSixColorInitial.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\RL6432_Series_Color\RL6432_Series_ColorSixColorInitial.c LARGE OPTIMIZ
                    -E(9,SPEED) INCDIR(..\..\..\Common;..\Header;.\Header;..\..\ScalerFunction\Lib\Header;..\..\ScalerFunction\Header;..\..\S
                    -calerCommonFunction\Lib\Header;..\..\ScalerCommonFunction\Header;..\..\RL6432_Series_Common\Lib\Header;..\..\RL6432_Seri
                    -es_Common\Header) DEFINE(_TRANSLATOR_SUPPORT=_OFF,_SCALER_TYPE=_RL6432_SERIES) DEBUG OBJECTEXTEND PRINT(.\Output\RL6432_
                    -Series_ColorSixColorInitial.lst) OBJECT(.\Output\RL6432_Series_ColorSixColorInitial.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2012>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : RL6432_Series_ColorSixColorInitial.c
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          #include "RL6432_Series_ColorLibInternalInclude.h"
  20          
  21          //****************************************************************************
  22          // DEFINITIONS / MACROS
  23          //****************************************************************************
  24          //--------------------------------------------------
  25          // Definitions of Six Color
  26          //--------------------------------------------------
  27          #define _SIX_COLOR_RIGHTBUFFER                    0
  28          #define _SIX_COLOR_RIGHTWIDTH                     1
  29          #define _SIX_COLOR_CENTER                         2
  30          #define _SIX_COLOR_LEFTWIDTH                      3
  31          #define _SIX_COLOR_LEFTBUFFER                     4
  32          
  33          
  34          //****************************************************************************
  35          // STRUCT / TYPE / ENUM DEFINITTIONS
  36          //****************************************************************************
  37          
  38          
  39          //****************************************************************************
  40          // CODE TABLES
  41          //****************************************************************************
  42          //--------------------------------------------------
  43          // Code Tables of SixColor
  44          //--------------------------------------------------
  45          SWORD code tSIX_COLOR_DEFAULT_ANGLE[][5] =
  46          {
  47              {587,  0, 135, 482,  604},
  48              {1191, 0, 135, 260,  420},
  49              {1611, 0, 437, 884,  1024},
  50              {2635, 0, 135, 280,  370},
  51              {3005, 0, 369, 504,  746},
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORINITIAL                                    05/25/2022 15:41:33 PAGE 2   

  52              {3751, 0, 345, 670,  932}
  53          };
  54          
  55          SWORD code tSIX_COLOR_U_MAX[][5] =
  56          {
  57              {1256, 1256, 1024, 3955, 3560},
  58              {3560, 3560, 3072, 2856, 2630},
  59              {2630, 2630, 2048, 2643, 2841},
  60              {2841, 2841, 3072, 3594, 3885},
  61              {3885, 3885, 1024, 1256, 1584},
  62              {1584, 1584, 2047, 1609, 1256},
  63          };
  64          
  65          //****************************************************************************
  66          // VARIABLE DECLARATIONS
  67          //****************************************************************************
  68          
  69          
  70          //****************************************************************************
  71          // FUNCTION DECLARATIONS
  72          //****************************************************************************
  73          void ScalerColorSixColorSetAngleRB(BYTE ucCMSel);
  74          void ScalerColorSixColorInitialNormal(void);
  75          
  76          
  77          //****************************************************************************
  78          // FUNCTION DEFINITIONS
  79          //****************************************************************************
  80          //--------------------------------------------------
  81          // Description  : Set range for one CM
  82          // Input Value  : ucCMSel --> Color selected
  83          //                shRBuffer --> Right buffer hue
  84          //                shRWidth --> Right range
  85          //                shAngle --> Master Range
  86          //                shLWidth --> Left Range
  87          //                shLBuffer --> Left Buffer Range
  88          // Output Value : None
  89          //--------------------------------------------------
  90          void ScalerColorSixColorSetAngleRB(BYTE ucCMSel)
  91          {
  92   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), ucCMSel);
  93   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_53_PORT_CMN_MST_UMAX_H);
  94   1      
  95   1          // Master Umax
  96   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_CENTER]) >> 8));
  97   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_CENTER]) & 0xFF));
  98   1      
  99   1          // Rightwidth Umax
 100   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_RIGHTWIDTH]) >> 8));
 101   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_RIGHTWIDTH]) & 0xFF));
 102   1      
 103   1          // Leftwidth Umax
 104   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_LEFTWIDTH]) >> 8));
 105   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_LEFTWIDTH]) & 0xFF));
 106   1      
 107   1          // Rightbuffer Umax
 108   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_RIGHTBUFFER]) >> 8));
 109   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_RIGHTBUFFER]) & 0xFF));
 110   1      
 111   1          // Leftbuffer Umax
 112   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_LEFTBUFFER]) >> 8));
 113   1          ScalerSetByte(P7_D3_ICM_DATA, ((tSIX_COLOR_U_MAX[ucCMSel][_SIX_COLOR_LEFTBUFFER]) & 0xFF));
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORINITIAL                                    05/25/2022 15:41:33 PAGE 3   

 114   1      
 115   1          // Right Buffer Hue
 116   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_RIGHTBUFFER] >> 8);
 117   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_RIGHTBUFFER] & 0xFF);
 118   1      
 119   1          // Right Width Range
 120   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_RIGHTWIDTH] >> 8);
 121   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_RIGHTWIDTH] & 0xFF);
 122   1      
 123   1          // Master Range
 124   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_CENTER] >> 8);
 125   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_CENTER] & 0xFF);
 126   1      
 127   1          // Left Width Range
 128   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_LEFTWIDTH] >> 8);
 129   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_LEFTWIDTH] & 0xFF);
 130   1      
 131   1          // Left Buffer Range
 132   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_LEFTBUFFER] >> 8);
 133   1          ScalerSetByte(P7_D3_ICM_DATA, tSIX_COLOR_DEFAULT_ANGLE[ucCMSel][_SIX_COLOR_LEFTBUFFER] & 0xFF);
 134   1      
 135   1          // Set Master/Rightwidth/Leftwidth/Rightbuffer/Leftbuffer LSB to 0
 136   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_83_PORT_CMN_MST_WID_UMAX_L);
 137   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 138   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 139   1      
 140   1          // Set Right Buffer Hue/Right Width Range/Master Range/Left Width Range/Left Buffer Range LSB to 0
 141   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_85_PORT_CMN_HUE_SET1_L);
 142   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 143   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 144   1      }
 145          
 146          //--------------------------------------------------
 147          // Description  : Enable ICM function
 148          // Input Value  : None
 149          // Output Value : None
 150          //--------------------------------------------------
 151          void ScalerColorSixColorInitialNormal(void)
 152          {
 153   1          BYTE ucCmIndex = 0;
 154   1      
 155   1          // Enable ICM
 156   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT4 | _BIT3), _BIT4 | _BIT3);
 157   1      
 158   1          // Enable New ICM mode
 159   1          ScalerSetBit(P7_D4_ICM_SEL2, ~(_BIT2 | _BIT1), _BIT2 | _BIT1);
 160   1      
 161   1          // Enable ICM function
 162   1          ScalerSetByte(P7_D0_ICM_CONTROL, (_BIT7 | _BIT5 | _BIT4 | _BIT3 | _BIT2 | _BIT1 | _BIT0));
 163   1      
 164   1          // Close SCM
 165   1          ScalerSetByte(P7_CC_SCM_BLOCK_ENABLE, 0x00);
 166   1          ScalerSetBit(P7_CD_SCM_BLOCK_SELECT, ~_BIT4, 0x00);
 167   1      
 168   1          // Close ICM Brightness
 169   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), 0x00);
 170   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_67_PORT_CMN_BRI_RANGE);
 171   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 172   1      
 173   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), 0x01);
 174   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_67_PORT_CMN_BRI_RANGE);
 175   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORINITIAL                                    05/25/2022 15:41:33 PAGE 4   

 176   1      
 177   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), 0x02);
 178   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_67_PORT_CMN_BRI_RANGE);
 179   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 180   1      
 181   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), 0x03);
 182   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_67_PORT_CMN_BRI_RANGE);
 183   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 184   1      
 185   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), 0x04);
 186   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_67_PORT_CMN_BRI_RANGE);
 187   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 188   1      
 189   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), 0x05);
 190   1          ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_67_PORT_CMN_BRI_RANGE);
 191   1          ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 192   1      
 193   1          for(ucCmIndex = 0; ucCmIndex < 6; ucCmIndex++)
 194   1          {
 195   2              ScalerColorSixColorSetAngleRB(ucCmIndex);
 196   2          }
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    273    ----
   CONSTANT SIZE    =    120    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
