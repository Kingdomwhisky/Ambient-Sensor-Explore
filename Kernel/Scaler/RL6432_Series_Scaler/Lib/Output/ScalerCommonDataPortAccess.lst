C51 COMPILER V8.12   SCALERCOMMONDATAPORTACCESS                                            05/25/2022 15:40:55 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE SCALERCOMMONDATAPORTACCESS
OBJECT MODULE PLACED IN .\Output\ScalerCommonDataPortAccess.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\ScalerCommonFunction\Lib\Code\ScalerCommonReg\ScalerCommonDataPortAcc
                    -ess.c LARGE OPTIMIZE(9,SPEED) INCDIR(..\..\..\Common;..\Header;.\Header;..\..\ScalerFunction\Lib\Header;..\..\ScalerFunc
                    -tion\Header;..\..\ScalerCommonFunction\Lib\Header;..\..\ScalerCommonFunction\Header;..\..\RL6432_Series_Common\Lib\Heade
                    -r;..\..\RL6432_Series_Common\Header) DEFINE(_TRANSLATOR_SUPPORT=_OFF,_SCALER_TYPE=_RL6432_SERIES) DEBUG OBJECTEXTEND PRI
                    -NT(.\Output\ScalerCommonDataPortAccess.lst) OBJECT(.\Output\ScalerCommonDataPortAccess.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2012>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : ScalerCommonDataPortAccess.c
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          #include "ScalerCommonRegLibInternalInclude.h"
  20          
  21          //****************************************************************************
  22          // DEFINITIONS / MACROS
  23          //****************************************************************************
  24          
  25          
  26          //****************************************************************************
  27          // STRUCT / TYPE / ENUM DEFINITTIONS
  28          //****************************************************************************
  29          
  30          
  31          //****************************************************************************
  32          // CODE TABLES
  33          //****************************************************************************
  34          
  35          
  36          //****************************************************************************
  37          // VARIABLE DECLARATIONS
  38          //****************************************************************************
  39          
  40          
  41          //****************************************************************************
  42          // FUNCTION DECLARATIONS
  43          //****************************************************************************
  44          BYTE ScalerEnableAccessPort(WORD usAddr, BYTE ucValue);
  45          void ScalerDisableAccessPort(WORD usAddr);
  46          void ScalerSetDataPortByte(WORD usAddr, BYTE ucValue1, BYTE ucValue2);
  47          void ScalerGetDataPortByte(WORD usAddr, BYTE ucValue, WORD usLength, BYTE *pucArray, bit bAutoInc);
  48          void ScalerSetDataPortBit(WORD usAddr, BYTE ucValue, BYTE ucAnd, BYTE ucOr);
  49          BYTE ScalerGetDataPortBit(WORD usAddr, BYTE ucValue, BYTE ucAnd);
  50          
  51          //****************************************************************************
C51 COMPILER V8.12   SCALERCOMMONDATAPORTACCESS                                            05/25/2022 15:40:55 PAGE 2   

  52          // FUNCTION DEFINITIONS
  53          //****************************************************************************
  54          //--------------------------------------------------
  55          // Description  : Enable Access Port
  56          // Input Value  : usAddr    --> Start address of register
  57          //                ucValue   --> Data Port Value we want to set
  58          // Output Value : Return Access Port Value
  59          //--------------------------------------------------
  60          BYTE ScalerEnableAccessPort(WORD usAddr, BYTE ucValue)
  61          {
  62   1          usAddr = usAddr;
  63   1          return ucValue;
  64   1      }
  65          
  66          //--------------------------------------------------
  67          // Description  : Disable Access Port
  68          // Input Value  : usAddr   --> Start address of register
  69          // Output Value : None
  70          //--------------------------------------------------
  71          void ScalerDisableAccessPort(WORD usAddr)
  72          {
  73   1          usAddr = usAddr;
  74   1      }
  75          
  76          //--------------------------------------------------
  77          // Description  : Set the value into selected register in data port
  78          // Input Value  : usAddr    --> Access Port Address of register
  79          //                ucValue1  --> Data Port Value we want to set
  80          //                ucValue2  --> Data Value we want to set
  81          // Output Value : None
  82          //--------------------------------------------------
  83          void ScalerSetDataPortByte(WORD usAddr, BYTE ucValue1, BYTE ucValue2)
  84          {
  85   1          ScalerSetByte(usAddr, ScalerEnableAccessPort(usAddr, ucValue1));
  86   1          ScalerSetByte(usAddr + 1, ucValue2);
  87   1      
  88   1          ScalerDisableAccessPort(usAddr);
  89   1      }
  90          
  91          //--------------------------------------------------
  92          // Description  : Get bytes from selected register in data port
  93          // Input Value  : usAddr    --> Access Port Address of register
  94          //                ucValue   --> Data Port Address we want to Get
  95          //                ucLength  --> Numbers of data we want to read
  96          //                pArray    --> Pointer of the reading data array
  97          //                bAutoInc  --> Address auto increasing select
  98          // Output Value : None
  99          //--------------------------------------------------
 100          void ScalerGetDataPortByte(WORD usAddr, BYTE ucValue, WORD usLength, BYTE *pucArray, bit bAutoInc)
 101          {
 102   1          BYTE ucAccessValue = 0;
 103   1          WORD usIndex = 0;
 104   1      
 105   1          if(usLength > 0)
 106   1          {
 107   2              ucAccessValue = ScalerEnableAccessPort(usAddr, ucValue);
 108   2      
 109   2              for(usIndex = 0; usIndex < usLength; usIndex++)
 110   2              {
 111   3                  if(bAutoInc == _AUTOINC)
 112   3                  {
 113   4                      ScalerSetByte(usAddr, ucAccessValue + usIndex);
C51 COMPILER V8.12   SCALERCOMMONDATAPORTACCESS                                            05/25/2022 15:40:55 PAGE 3   

 114   4                  }
 115   3                  else
 116   3                  {
 117   4                      ScalerSetByte(usAddr, ucAccessValue);
 118   4                  }
 119   3      
 120   3                  pucArray[usIndex] = ScalerGetByte(usAddr + 1);
 121   3              }
 122   2      
 123   2              ScalerDisableAccessPort(usAddr);
 124   2          }
 125   1      }
 126          
 127          //--------------------------------------------------
 128          // Description  : Set some bits of selected register in data port
 129          // Input Value  : usAddr    --> Access Port Address of register
 130          //                ucValue   --> Data Port Value we want to set
 131          //                ucAnd     --> & operation
 132          //                ucOr      --> | operation
 133          // Output Value : None
 134          //--------------------------------------------------
 135          void ScalerSetDataPortBit(WORD usAddr, BYTE ucValue, BYTE ucAnd, BYTE ucOr)
 136          {
 137   1          BYTE ucValueTemp = 0;
 138   1      
 139   1          ScalerSetByte(usAddr, ScalerEnableAccessPort(usAddr, ucValue));
 140   1          ucValueTemp = ScalerGetByte(usAddr + 1);
 141   1      
 142   1          ucValueTemp = (ucValueTemp & ucAnd) | ucOr;
 143   1      
 144   1          ScalerSetByte(usAddr, ScalerEnableAccessPort(usAddr, ucValue));
 145   1          ScalerSetByte(usAddr + 1, ucValueTemp);
 146   1      
 147   1          ScalerDisableAccessPort(usAddr);
 148   1      }
 149          
 150          //--------------------------------------------------
 151          // Description  : Set some bits of selected register in data port
 152          // Input Value  : usAddr    --> Access Port Address of register
 153          //                ucValue   --> Data Port Value we want to set
 154          //                ucAnd     --> & operation
 155          // Output Value : Value after & operation
 156          //--------------------------------------------------
 157          BYTE ScalerGetDataPortBit(WORD usAddr, BYTE ucValue, BYTE ucAnd)
 158          {
 159   1          BYTE ucValueTemp = 0;
 160   1      
 161   1          ScalerSetByte(usAddr, ScalerEnableAccessPort(usAddr, ucValue));
 162   1          ucValueTemp = (ScalerGetByte(usAddr + 1) & ucAnd);
 163   1          ScalerDisableAccessPort(usAddr);
 164   1      
 165   1          return ucValueTemp;
 166   1      }
 167          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    368    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V8.12   SCALERCOMMONDATAPORTACCESS                                            05/25/2022 15:40:55 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
