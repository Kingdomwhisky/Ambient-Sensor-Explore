C51 COMPILER V8.12   SCALERCOMMONCOMPUTEDWORDMULDIV                                        05/25/2022 15:40:54 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE SCALERCOMMONCOMPUTEDWORDMULDIV
OBJECT MODULE PLACED IN .\Output\ScalerCommonComputeDwordMulDiv.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\ScalerCommonFunction\Lib\Code\ScalerCommon\ScalerCommonComputeDwordMu
                    -lDiv.c LARGE OPTIMIZE(9,SPEED) INCDIR(..\..\..\Common;..\Header;.\Header;..\..\ScalerFunction\Lib\Header;..\..\ScalerFun
                    -ction\Header;..\..\ScalerCommonFunction\Lib\Header;..\..\ScalerCommonFunction\Header;..\..\RL6432_Series_Common\Lib\Head
                    -er;..\..\RL6432_Series_Common\Header) DEFINE(_TRANSLATOR_SUPPORT=_OFF,_SCALER_TYPE=_RL6432_SERIES) DEBUG OBJECTEXTEND PR
                    -INT(.\Output\ScalerCommonComputeDwordMulDiv.lst) OBJECT(.\Output\ScalerCommonComputeDwordMulDiv.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2012>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          #include "ScalerCommonLibInternalInclude.h"
  16          
  17          //----------------------------------------------------------------------------------------------------
  18          // ID Code      : ScalerCommonComputeDwordMulDiv.c No.0000
  19          // Update Note  :
  20          //----------------------------------------------------------------------------------------------------
  21          
  22          
  23          //****************************************************************************
  24          // DEFINITIONS / MACROS
  25          //****************************************************************************
  26          #define MULTIPLY_OVERFLOW32_CHECK(x, y)                      (((x) == 0) || ((y) == 0) || ((DWORD)(x) < (0
             -xFFFFFFFF / (DWORD)(y))))
  27          
  28          //****************************************************************************
  29          // STRUCT / TYPE / ENUM DEFINITTIONS
  30          //****************************************************************************
  31          
  32          //****************************************************************************
  33          // CODE TABLES
  34          //****************************************************************************
  35          
  36          //****************************************************************************
  37          // VARIABLE DECLARATIONS
  38          //****************************************************************************
  39          
  40          //****************************************************************************
  41          // FUNCTION DECLARATIONS
  42          //****************************************************************************
  43          DWORD ScalerComputeDwordPowDiv(DWORD ulA, BYTE ucPow, DWORD ulB);
  44          DWORD ScalerComputeDwordMulDiv(DWORD ulA, DWORD ulB, DWORD ulC);
  45          
  46          //****************************************************************************
  47          // FUNCTION DEFINITIONS
  48          //****************************************************************************
  49          //--------------------------------------------------
  50          // Description  : Division for (A * 2^pow) / ulB
C51 COMPILER V8.12   SCALERCOMMONCOMPUTEDWORDMULDIV                                        05/25/2022 15:40:54 PAGE 2   

  51          // Input Value  : A, ucPow, ulB
  52          // Output Value : (A * 2^pow) / B ratio in 32-bit precision
  53          //--------------------------------------------------
  54          DWORD ScalerComputeDwordPowDiv(DWORD ulA, BYTE ucPow, DWORD ulB)
  55          {
  56   1          DWORD ulResult = 0;
  57   1      
  58   1          do
  59   1          {
  60   2              ulResult <<= 1;
  61   2      
  62   2              if(ulA >= ulB)
  63   2              {
  64   3                  ulResult += (ulA / ulB);
  65   3                  ulA %= ulB;
  66   3              }
  67   2      
  68   2              ulA <<= 1;
  69   2          }
  70   1          while(ucPow-- != 0);
  71   1      
  72   1          return (ulA >= ulB) ? (ulResult + 1) : ulResult;
  73   1      }
  74          
  75          //--------------------------------------------------
  76          // Description  : Multiplication and Division for DWORD
  77          // Input Value  : A, B, C
  78          // Output Value : A * B / C in 32-bit precision
  79          //--------------------------------------------------
  80          DWORD ScalerComputeDwordMulDiv(DWORD ulA, DWORD ulB, DWORD ulC)
  81          {
  82   1          if(MULTIPLY_OVERFLOW32_CHECK(ulA, ulB) == _TRUE)
  83   1          {
  84   2              return ulA * ulB / ulC;
  85   2          }
  86   1          else
  87   1          {
  88   2              /// Let A = x1 * 2^16 + x2, B = x3 * 2^16 + x4
  89   2              /// --> A * B = (x1 * x3) * 2^32 + ((x1 * x4) + (x2 * x3)) * 2^16 + (x2 * x4)
  90   2              ///           = factor_32 * 2^32 + factor_00
  91   2              DWORD ulBase16_0 = (DWORD)HIWORD(ulA) * LOWORD(ulB);
  92   2              DWORD ulBase16_1 = (DWORD)LOWORD(ulA) * HIWORD(ulB);
  93   2      
  94   2              DWORD ulBase00 = (DWORD)LOWORD(ulA) * LOWORD(ulB);
  95   2              DWORD ulBase32 = (DWORD)HIWORD(ulA) * HIWORD(ulB);
  96   2      
  97   2              DWORD ulBuffer = ((DWORD)LOWORD(ulBase16_0) + LOWORD(ulBase16_1) + HIWORD(ulBase00));
  98   2      
  99   2              ulBase00 = ((((DWORD)LOWORD(ulBuffer)) << 16) | LOWORD(ulBase00));
 100   2              ulBase32 += ((DWORD)HIWORD(ulBase16_0) + HIWORD(ulBase16_1) + HIWORD(ulBuffer));
 101   2      
 102   2              return ScalerComputeDwordPowDiv(ulBase32, 32, ulC) +
 103   2                     ScalerComputeDwordPowDiv(ulBase00, 0, ulC);
 104   2          }
 105   1      
 106   1          /*
 107   1          if((ulA >= ulC) &&
 108   1                  (MULTIPLY_OVERFLOW_CHECK(ulB, ulC - 1) == _TRUE))
 109   1          {
 110   1              return (ulA / ulC * ulB) + ((ulA % ulC) * ulB / ulC);
 111   1          }
 112   1          else if((ulB >= ulC) &&
C51 COMPILER V8.12   SCALERCOMMONCOMPUTEDWORDMULDIV                                        05/25/2022 15:40:54 PAGE 3   

 113   1                  (MULTIPLY_OVERFLOW_CHECK(ulA, ulC - 1) == _TRUE))
 114   1          {
 115   1              return (ulB / ulC * ulA) + ((ulB % ulC) * ulA / ulC);
 116   1          }
 117   1          else
 118   1          {
 119   1              DWORD ulRemainA = ulA % ulC;
 120   1              DWORD ulRemainB = ulB % ulC;
 121   1              DWORD ulResult = ((ulA / ulC) * (ulB / ulC) * ulC) +
 122   1                               ((ulA / ulC) * ulRemainB + (ulB / ulC) * ulRemainA);
 123   1      
 124   1              if(MULTIPLY_OVERFLOW_CHECK(ulRemainA, ulRemainB) == _TRUE)
 125   1              {
 126   1                  return ulResult + (ulRemainA * ulRemainB / ulC);
 127   1              }
 128   1              else if(MULTIPLY_OVERFLOW_CHECK(ulRemainA, ulC - ulRemainB) == _TRUE)
 129   1              {
 130   1                  return ulResult + ulRemainA - (ulRemainA * (ulC - ulRemainB) / ulC);
 131   1              }
 132   1              else if(MULTIPLY_OVERFLOW_CHECK(ulRemainB, ulC - ulRemainA) == _TRUE)
 133   1              {
 134   1                  return ulResult + ulRemainB - (ulRemainB * (ulC - ulRemainA) / ulC);
 135   1              }
 136   1          }
 137   1          */
 138   1      }
 139          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    743    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      45
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
