C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE RL6432_SERIES_COLORSIXCOLORADJUST
OBJECT MODULE PLACED IN .\Output\RL6432_Series_ColorSixColorAdjust.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\RL6432_Series_Color\RL6432_Series_ColorSixColorAdjust.c LARGE OPTIMIZE
                    -(9,SPEED) INCDIR(..\..\..\Common;..\Header;.\Header;..\..\ScalerFunction\Lib\Header;..\..\ScalerFunction\Header;..\..\Sc
                    -alerCommonFunction\Lib\Header;..\..\ScalerCommonFunction\Header;..\..\RL6432_Series_Common\Lib\Header;..\..\RL6432_Serie
                    -s_Common\Header) DEFINE(_TRANSLATOR_SUPPORT=_OFF,_SCALER_TYPE=_RL6432_SERIES) DEBUG OBJECTEXTEND PRINT(.\Output\RL6432_S
                    -eries_ColorSixColorAdjust.lst) OBJECT(.\Output\RL6432_Series_ColorSixColorAdjust.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2012>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : RL6432_Series_ColorSixColorAdjust.c
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          #include "RL6432_Series_ColorLibInternalInclude.h"
  20          
  21          //****************************************************************************
  22          // DEFINITIONS / MACROS
  23          //****************************************************************************
  24          //--------------------------------------------------
  25          // Table Length
  26          //--------------------------------------------------
  27          #define _SIXCOLOR_TABLE_SIZE_MSB                  64
  28          #define _SIXCOLOR_TABLE_SIZE_LSB                  16
  29          #define _SIXCOLOR_TABLE_SIZE_AXIS                 16
  30          
  31          //--------------------------------------------------
  32          // Definitions of Six Color
  33          //--------------------------------------------------
  34          #define _SIX_COLOR_RIGHTBUFFER                    0
  35          #define _SIX_COLOR_RIGHTWIDTH                     1
  36          #define _SIX_COLOR_CENTER                         2
  37          #define _SIX_COLOR_LEFTWIDTH                      3
  38          #define _SIX_COLOR_LEFTBUFFER                     4
  39          
  40          
  41          //****************************************************************************
  42          // STRUCT / TYPE / ENUM DEFINITTIONS
  43          //****************************************************************************
  44          
  45          
  46          //****************************************************************************
  47          // CODE TABLES
  48          //****************************************************************************
  49          //--------------------------------------------------
  50          // Code Tables of SixColor
  51          //--------------------------------------------------
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 2   

  52          SWORD code tSIX_COLOR_U_MAX_8[][3] =
  53          {
  54              { 313,  255,  -35},
  55              {-134, -255, -310},
  56              {-366, -512, -363},
  57              {-313, -255, -125},
  58              { -52,  255,  313},
  59              { 396,  512,  402},
  60          };
  61          
  62          SWORD code tSIX_COLOR_V_MAX_8[][3] =
  63          {
  64              { 396,  512,  512},
  65              { 512,  512,  403},
  66              { 290,    0, -297},
  67              {-396, -512, -512},
  68              {-512, -512, -396},
  69              {-231,    0,  219},
  70          };
  71          
  72          SWORD code tSIX_COLOR_CTOC_DELTA_UV_DOWN[][2] =
  73          {
  74              {-447,    0}, // R-->Y
  75              {-179, -361}, // Y-->G
  76              { 226, -449}, // G-->C
  77              { 348,    0}, // C-->B
  78              { 193,  390}, // B-->M
  79              {-226,  449}, // M-->R
  80          };
  81          
  82          SWORD code tSIX_COLOR_RTOR_DELTA_UV_DOWN[][4] =
  83          {
  84              { -58,  116, -390,    0},
  85              {-122,    0, -111, -221},
  86              {-145, -291,  198, -396},
  87              {  58, -116,  203,    0},
  88              { 309,    0,  140,  280},
  89              { 116,  232, -198,  396},
  90          };
  91          
  92          SWORD code tSIX_COLOR_LTOL_DELTA_UV_DOWN[][2] =
  93          {
  94              {-221,    0},
  95              {-202, -404},
  96              { 107, -215},
  97              { 382,    0},
  98              { 198,  396},
  99              {-146,  293},
 100          };
 101          
 102          SWORD code tSIX_COLOR_CTOC_DELTA_UV_UP[][2] =
 103          {
 104              { 197, -397}, // R-->M
 105              { 358,    0}, // Y-->R
 106              { 229,  454}, // G-->Y
 107              {-177,  358}, // C-->G
 108              {-444,    0}, // B-->C
 109              {-227, -450}, // M-->B
 110          };
 111          
 112          SWORD code tSIX_COLOR_RTOR_DELTA_UV_UP[][2] =
 113          {
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 3   

 114              { 198, -396},
 115              { 390,    0},
 116              { 111,  221},
 117              {-198,  396},
 118              {-203,    0},
 119              {-140, -280},
 120          };
 121          
 122          SWORD code tSIX_COLOR_LTOL_DELTA_UV_UP[][4] =
 123          {
 124              { 291,    0,  146, -293},
 125              {  54,  108,  221,    0},
 126              {-149,  297,  202,  404},
 127              {-130,    0, -107,  215},
 128              { -58, -116, -382,    0},
 129              { 110, -219, -198, -396},
 130          };
 131          
 132          code BYTE tICM_TABLE_GRAY_R[] =
 133          {
 134              0xFC, 0xF8, 0xF8, 0xF0, 0xF4, 0xE8, 0xF0, 0xE0, 0xEC, 0xD8, 0xE8, 0xD0, 0xE4, 0xC8, 0xE0, 0xC0,
 135              0xFB, 0xF9, 0xF6, 0xF3, 0xF1, 0xED, 0xEC, 0xE7, 0xE7, 0xE1, 0xE2, 0xDA, 0xDD, 0xD4, 0xD8, 0xCE,
 136              0x00, 0xF8, 0x01, 0xF0, 0x01, 0xE8, 0x02, 0xE0, 0x02, 0xD8, 0x03, 0xD0, 0x03, 0xC8, 0x04, 0xC0,
 137              0xFB, 0xF9, 0xF6, 0xF3, 0xF1, 0xED, 0xEC, 0xE7, 0xE7, 0xE1, 0xE2, 0xDA, 0xDD, 0xD4, 0xD8, 0xCE,
 138              // LSB
 139              0x00, 0x00, 0x00, 0x00, 0x36, 0x69, 0x8B, 0xFE, 0x80, 0xC4, 0xC4, 0xC8, 0x36, 0x69, 0x8B, 0xFE,
 140          };
 141          
 142          code BYTE tICM_TABLE_GRAY_Y[] =
 143          {
 144              0x04, 0xF8, 0x08, 0xF0, 0x0C, 0xE8, 0x10, 0xE0, 0x14, 0xD8, 0x18, 0xD0, 0x1C, 0xC8, 0x20, 0xC0,
 145              0x02, 0xF8, 0x04, 0xF0, 0x06, 0xE8, 0x08, 0xE0, 0x0A, 0xD8, 0x0C, 0xD0, 0x0E, 0xC8, 0x10, 0xC0,
 146              0x04, 0xF9, 0x09, 0xF3, 0x0E, 0xED, 0x13, 0xE6, 0x18, 0xE0, 0x1D, 0xDA, 0x22, 0xD3, 0x26, 0xCD,
 147              0x02, 0xF8, 0x04, 0xF0, 0x06, 0xE8, 0x08, 0xE0, 0x0A, 0xD8, 0x0C, 0xD0, 0x0E, 0xC8, 0x10, 0xC0,
 148              // LSB
 149              0x00, 0x00, 0x00, 0x00, 0x04, 0x48, 0x88, 0xCC, 0xFE, 0x8B, 0x61, 0x3E, 0x04, 0x48, 0x88, 0xCC,
 150          };
 151          
 152          code BYTE tICM_TABLE_GRAY_G[] =
 153          {
 154              0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x20, 0x00, 0x28, 0x00, 0x30, 0x00, 0x38, 0x00, 0x40, 0x00,
 155              0x05, 0xFB, 0x0B, 0xF7, 0x11, 0xF2, 0x17, 0xED, 0x1C, 0xE9, 0x22, 0xE4, 0x28, 0xE0, 0x2D, 0xDB,
 156              0x05, 0x04, 0x0B, 0x09, 0x11, 0x0E, 0x16, 0x12, 0x1C, 0x17, 0x22, 0x1B, 0x27, 0x20, 0x2D, 0x25,
 157              0x05, 0xFB, 0x0B, 0xF7, 0x11, 0xF2, 0x17, 0xED, 0x1C, 0xE9, 0x22, 0xE4, 0x28, 0xE0, 0x2D, 0xDB,
 158              // LSB
 159              0x00, 0x00, 0x00, 0x00, 0xE8, 0x53, 0xD7, 0x1F, 0xF5, 0x0E, 0x93, 0xE9, 0xE8, 0x53, 0xD7, 0x1F,
 160          };
 161          
 162          code BYTE tICM_TABLE_GRAY_C[] =
 163          {
 164              0x04, 0x08, 0x08, 0x10, 0x0C, 0x18, 0x10, 0x20, 0x14, 0x28, 0x18, 0x30, 0x1C, 0x38, 0x20, 0x40,
 165              0x05, 0x06, 0x09, 0x0C, 0x0E, 0x12, 0x13, 0x18, 0x18, 0x1F, 0x1D, 0x25, 0x22, 0x2B, 0x27, 0x31,
 166              0x02, 0x08, 0x04, 0x10, 0x06, 0x18, 0x07, 0x20, 0x09, 0x28, 0x0B, 0x30, 0x0D, 0x38, 0x0F, 0x40,
 167              0x05, 0x06, 0x09, 0x0C, 0x0E, 0x12, 0x13, 0x18, 0x18, 0x1F, 0x1D, 0x25, 0x22, 0x2B, 0x27, 0x31,
 168              // LSB
 169              0x00, 0x00, 0x00, 0x00, 0x1E, 0xEB, 0x89, 0x56, 0x00, 0x0C, 0xCC, 0xCC, 0x1E, 0xEB, 0x89, 0x56,
 170          };
 171          
 172          code BYTE tICM_TABLE_GRAY_B[] =
 173          {
 174              0xFC, 0x08, 0xF8, 0x10, 0xF4, 0x18, 0xF0, 0x20, 0xEC, 0x28, 0xE8, 0x30, 0xE4, 0x38, 0xE0, 0x40,
 175              0x00, 0x08, 0x01, 0x10, 0x02, 0x18, 0x03, 0x20, 0x04, 0x28, 0x05, 0x30, 0x05, 0x38, 0x06, 0x40,
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 4   

 176              0xFB, 0x06, 0xF6, 0x0C, 0xF1, 0x12, 0xEC, 0x18, 0xE7, 0x1F, 0xE2, 0x25, 0xDD, 0x2B, 0xD8, 0x31,
 177              0x00, 0x08, 0x01, 0x10, 0x02, 0x18, 0x03, 0x20, 0x04, 0x28, 0x05, 0x30, 0x05, 0x38, 0x06, 0x40,
 178              // LSB
 179              0x00, 0x00, 0x00, 0x00, 0xCC, 0x84, 0x00, 0xC8, 0x16, 0x6B, 0x89, 0xDE, 0xCC, 0x84, 0x00, 0xC8,
 180          };
 181          
 182          code BYTE tICM_TABLE_GRAY_M[] =
 183          {
 184              0xF8, 0x00, 0xF0, 0x00, 0xE8, 0x00, 0xE0, 0x00, 0xD8, 0x00, 0xD0, 0x00, 0xC8, 0x00, 0xC0, 0x00,
 185              0xF9, 0x03, 0xF3, 0x07, 0xED, 0x0A, 0xE7, 0x0E, 0xE1, 0x12, 0xDA, 0x15, 0xD4, 0x19, 0xCE, 0x1D,
 186              0xF9, 0xFC, 0xF3, 0xF9, 0xED, 0xF5, 0xE6, 0xF2, 0xE0, 0xEF, 0xDA, 0xEB, 0xD4, 0xE8, 0xCD, 0xE4,
 187              0xF9, 0x03, 0xF3, 0x07, 0xED, 0x0A, 0xE7, 0x0E, 0xE1, 0x12, 0xDA, 0x15, 0xD4, 0x19, 0xCE, 0x1D,
 188              // LSB
 189              0x00, 0x00, 0x00, 0x00, 0xE9, 0xB6, 0x0F, 0xD8, 0xE9, 0x7D, 0x86, 0x0E, 0xE9, 0xB6, 0x0F, 0xD8,
 190          };
 191          
 192          code BYTE *tICM_TABLE_GRAY[] =
 193          {
 194              tICM_TABLE_GRAY_R,
 195              tICM_TABLE_GRAY_Y,
 196              tICM_TABLE_GRAY_G,
 197              tICM_TABLE_GRAY_C,
 198              tICM_TABLE_GRAY_B,
 199              tICM_TABLE_GRAY_M,
 200          };
 201          
 202          //Osd Turning position to next CM
 203          BYTE code tR_TURNING_POSITION_DOWN[] = {61, 66, 71, 68, 75, 69};
 204          BYTE code tL_TURNING_POSITION_UP[] = {27, 34, 29, 33, 39, 32};
 205          
 206          //****************************************************************************
 207          // VARIABLE DECLARATIONS
 208          //****************************************************************************
 209          
 210          
 211          //****************************************************************************
 212          // FUNCTION DECLARATIONS
 213          //****************************************************************************
 214          void ScalerColorSixColorAdjustNormal(BYTE ucColorIndex, BYTE ucHuePosition, BYTE ucSatPosition);
 215          void ScalerColorSixColorICMLoad(BYTE *pucICMData, BYTE ucCMSel, BYTE ucLoadSelect);
 216          
 217          
 218          //****************************************************************************
 219          // FUNCTION DEFINITIONS
 220          //****************************************************************************
 221          //--------------------------------------------------
 222          // Description  : 6 Color ICM adjust
 223          // Input Value  : ucColorIndex --> Color Adjusted Now
 224          //                ucHuePosition --> Hue position after mapping
 225          //                ucSatPosition --> Sat position after mapping
 226          // Output Value : None
 227          //--------------------------------------------------
 228          void ScalerColorSixColorAdjustNormal(BYTE ucColorIndex, BYTE ucHuePosition, BYTE ucSatPosition)
 229          {
 230   1          BYTE pucCentDeltaUV[16];
 231   1          BYTE ucLastIndex = 0;
 232   1          BYTE ucAxis = 0;
 233   1          BYTE ucPointIndex = 0;
 234   1          SWORD shDeltaSat = 0;
 235   1          SWORD shDeltaUmax1 = 0;
 236   1          SWORD shDeltaVmax1 = 0;
 237   1          SWORD shDeltaUmax = 0;
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 5   

 238   1          SWORD shDeltaVmax = 0;
 239   1          SWORD shDeltaU = 0;
 240   1          SWORD shDeltaV = 0;
 241   1          BYTE ucTurningPositiongUp = 0;
 242   1          BYTE ucTurningPositiongDown = 0;
 243   1          BYTE ucLSBDataIndex = 0;
 244   1          memset(pucCentDeltaUV, 0, sizeof(pucCentDeltaUV));
 245   1      
 246   1          ucLastIndex = (ucColorIndex == 0) ? 5 : (ucColorIndex - 1);
 247   1      
 248   1          // Not Use SCM
 249   1          ScalerSetBit(P7_CD_SCM_BLOCK_SELECT, ~_BIT4, 0x00);
 250   1      
 251   1          if(ucSatPosition != 0)
 252   1          {
 253   2              ucTurningPositiongUp = tL_TURNING_POSITION_UP[ucColorIndex];
 254   2              ucTurningPositiongDown = tR_TURNING_POSITION_DOWN[ucColorIndex];
 255   2      
 256   2              // Delta Saturation = (-512 * 200 + ((512 - (-512)) * ucSatPosition)) / 200
 257   2              shDeltaSat = ((SDWORD)-102400 + ((SDWORD)ucSatPosition << 10)) / 200;
 258   2      
 259   2              for(ucAxis = 1; ucAxis < 4; ucAxis++)
 260   2              {
 261   3                  // Calculate Delta Hue of one Axis
 262   3      
 263   3                  if(ucAxis == _SIX_COLOR_RIGHTWIDTH)
 264   3                  {
 265   4                      if((ucHuePosition > 50) && (ucHuePosition <= ucTurningPositiongDown))
 266   4                      {
 267   5                          shDeltaUmax = (SDWORD)tSIX_COLOR_RTOR_DELTA_UV_DOWN[ucColorIndex][0] * (ucHuePosition 
             -- 50) / (ucTurningPositiongDown - 50);
 268   5                          shDeltaVmax = (SDWORD)tSIX_COLOR_RTOR_DELTA_UV_DOWN[ucColorIndex][1] * (ucHuePosition 
             -- 50) / (ucTurningPositiongDown - 50);
 269   5                      }
 270   4                      else if(ucHuePosition > ucTurningPositiongDown)
 271   4                      {
 272   5                          shDeltaUmax = tSIX_COLOR_RTOR_DELTA_UV_DOWN[ucColorIndex][0] + (SDWORD)tSIX_COLOR_RTOR
             -_DELTA_UV_DOWN[ucColorIndex][2] * (ucHuePosition - ucTurningPositiongDown) / (100 - ucTurningPositiongDown);
 273   5                          shDeltaVmax = tSIX_COLOR_RTOR_DELTA_UV_DOWN[ucColorIndex][1] + (SDWORD)tSIX_COLOR_RTOR
             -_DELTA_UV_DOWN[ucColorIndex][3] * (ucHuePosition - ucTurningPositiongDown) / (100 - ucTurningPositiongDown);
 274   5                      }
 275   4                      else if(ucHuePosition < 50)
 276   4                      {
 277   5                          shDeltaUmax = (SDWORD)tSIX_COLOR_RTOR_DELTA_UV_UP[ucColorIndex][0] * (50 - ucHuePositi
             -on) / 50;
 278   5                          shDeltaVmax = (SDWORD)tSIX_COLOR_RTOR_DELTA_UV_UP[ucColorIndex][1] * (50 - ucHuePositi
             -on) / 50;
 279   5                      }
 280   4                      else
 281   4                      {
 282   5                          shDeltaUmax = 0;
 283   5                          shDeltaVmax = 0;
 284   5                      }
 285   4                  }
 286   3                  else if(ucAxis == _SIX_COLOR_CENTER)
 287   3                  {
 288   4                      if(ucHuePosition > 50)
 289   4                      {
 290   5                          shDeltaUmax = (SDWORD)tSIX_COLOR_CTOC_DELTA_UV_DOWN[ucColorIndex][0] * (ucHuePosition 
             -- 50) / 50;
 291   5                          shDeltaVmax = (SDWORD)tSIX_COLOR_CTOC_DELTA_UV_DOWN[ucColorIndex][1] * (ucHuePosition 
             -- 50) / 50;
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 6   

 292   5                      }
 293   4                      else if(ucHuePosition < 50)
 294   4                      {
 295   5                          shDeltaUmax = (SDWORD)tSIX_COLOR_CTOC_DELTA_UV_UP[ucColorIndex][0] * (50 - ucHuePositi
             -on) / 50;
 296   5                          shDeltaVmax = (SDWORD)tSIX_COLOR_CTOC_DELTA_UV_UP[ucColorIndex][1] * (50 - ucHuePositi
             -on) / 50;
 297   5                      }
 298   4                      else
 299   4                      {
 300   5                          shDeltaUmax = 0;
 301   5                          shDeltaVmax = 0;
 302   5                      }
 303   4                  }
 304   3                  else
 305   3                  {
 306   4                      if(ucHuePosition > 50)
 307   4                      {
 308   5                          shDeltaUmax = (SDWORD)tSIX_COLOR_LTOL_DELTA_UV_DOWN[ucColorIndex][0] * (ucHuePosition 
             -- 50) / 50;
 309   5                          shDeltaVmax = (SDWORD)tSIX_COLOR_LTOL_DELTA_UV_DOWN[ucColorIndex][1] * (ucHuePosition 
             -- 50) / 50;
 310   5                      }
 311   4                      else if((ucHuePosition < 50) && (ucHuePosition >= ucTurningPositiongUp))
 312   4                      {
 313   5                          shDeltaUmax = (SDWORD)tSIX_COLOR_LTOL_DELTA_UV_UP[ucColorIndex][0] * (50 - ucHuePositi
             -on) / (50 - ucTurningPositiongUp);
 314   5                          shDeltaVmax = (SDWORD)tSIX_COLOR_LTOL_DELTA_UV_UP[ucColorIndex][1] * (50 - ucHuePositi
             -on) / (50 - ucTurningPositiongUp);
 315   5                      }
 316   4                      else if(ucHuePosition < ucTurningPositiongUp)
 317   4                      {
 318   5                          shDeltaUmax = tSIX_COLOR_LTOL_DELTA_UV_UP[ucColorIndex][0] + (SDWORD)tSIX_COLOR_LTOL_D
             -ELTA_UV_UP[ucColorIndex][2] * (ucTurningPositiongUp - ucHuePosition) / ucTurningPositiongUp;
 319   5                          shDeltaVmax = tSIX_COLOR_LTOL_DELTA_UV_UP[ucColorIndex][1] + (SDWORD)tSIX_COLOR_LTOL_D
             -ELTA_UV_UP[ucColorIndex][3] * (ucTurningPositiongUp - ucHuePosition) / ucTurningPositiongUp;
 320   5                      }
 321   4                      else
 322   4                      {
 323   5                          shDeltaUmax = 0;
 324   5                          shDeltaVmax = 0;
 325   5                      }
 326   4                  }
 327   3      
 328   3                  shDeltaUmax1 = tSIX_COLOR_U_MAX_8[ucColorIndex][ucAxis - 1] + shDeltaUmax;
 329   3                  shDeltaVmax1 = tSIX_COLOR_V_MAX_8[ucColorIndex][ucAxis - 1] + shDeltaVmax;
 330   3      
 331   3                  shDeltaUmax1 = ((SDWORD)shDeltaSat * shDeltaUmax1) >> 9;
 332   3                  shDeltaVmax1 = ((SDWORD)shDeltaSat * shDeltaVmax1) >> 9;
 333   3      
 334   3                  shDeltaUmax = (shDeltaUmax1 + shDeltaUmax) >> 3;
 335   3                  shDeltaVmax = (shDeltaVmax1 + shDeltaVmax) >> 3;
 336   3      
 337   3                  for(ucPointIndex = 0; ucPointIndex < 8; ucPointIndex++)
 338   3                  {
 339   4                      shDeltaU = (shDeltaUmax * (ucPointIndex + 1)) >> 3;
 340   4                      shDeltaV = (shDeltaVmax * (ucPointIndex + 1)) >> 3;
 341   4      
 342   4                      shDeltaU = MAXOF(-128, MINOF(127, shDeltaU));
 343   4                      shDeltaV = MAXOF(-128, MINOF(127, shDeltaV));
 344   4      
 345   4                      pucCentDeltaUV[ucPointIndex << 1] = shDeltaU & 0xFF;
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 7   

 346   4                      pucCentDeltaUV[(ucPointIndex << 1) + 1] = shDeltaV & 0xFF;
 347   4                  }
 348   3      
 349   3                  ScalerColorSixColorICMLoad(pucCentDeltaUV, ucColorIndex, ucAxis);
 350   3      
 351   3                  if(ucAxis == _SIX_COLOR_RIGHTWIDTH)
 352   3                  {
 353   4                      ScalerColorSixColorICMLoad(pucCentDeltaUV, ucColorIndex, _SIX_COLOR_RIGHTBUFFER);
 354   4                      ScalerColorSixColorICMLoad(pucCentDeltaUV, ucLastIndex, _SIX_COLOR_LEFTBUFFER);
 355   4                  }
 356   3              }
 357   2      
 358   2              // Set LSB to 0
 359   2              ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), ucColorIndex);
 360   2              ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_6F_PORT_CMN_MST_00_01_UV_OFFSET_L);
 361   2      
 362   2              for(ucLSBDataIndex = 0; ucLSBDataIndex < 16; ucLSBDataIndex++)
 363   2              {
 364   3                  ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 365   3              }
 366   2      
 367   2              ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), ucLastIndex);
 368   2              ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_7F_PORT_CMN_LBUF_00_01_UV_OFFSET_L);
 369   2      
 370   2              for(ucLSBDataIndex = 0; ucLSBDataIndex < 4; ucLSBDataIndex++)
 371   2              {
 372   3                  ScalerSetByte(P7_D3_ICM_DATA, 0x00);
 373   3              }
 374   2          }
 375   1          else
 376   1          {
 377   2              // Load Code Table
 378   2              ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), ucColorIndex);
 379   2              ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_03_PORT_CMN_MST_00_DU_H);
 380   2              ScalerBurstWrite(tICM_TABLE_GRAY[ucColorIndex], _SIXCOLOR_TABLE_SIZE_MSB, GET_CURRENT_BANK_NUMBER(
             -), P7_D3_ICM_DATA, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
 381   2              ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_6F_PORT_CMN_MST_00_01_UV_OFFSET_L);
 382   2              ScalerBurstWrite(&tICM_TABLE_GRAY[ucColorIndex][_SIXCOLOR_TABLE_SIZE_MSB], _SIXCOLOR_TABLE_SIZE_LS
             -B, GET_CURRENT_BANK_NUMBER(), P7_D3_ICM_DATA, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
 383   2      
 384   2              ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), ucLastIndex);
 385   2              ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_43_PORT_CMN_LBUF_00_DU_H);
 386   2              ScalerBurstWrite(&tICM_TABLE_GRAY[ucColorIndex][16], 16, GET_CURRENT_BANK_NUMBER(), P7_D3_ICM_DATA
             -, _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
 387   2              ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_7F_PORT_CMN_LBUF_00_01_UV_OFFSET_L);
 388   2              ScalerBurstWrite(&tICM_TABLE_GRAY[ucColorIndex][68], 4, GET_CURRENT_BANK_NUMBER(), P7_D3_ICM_DATA,
             - _BURSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_FLASH);
 389   2          }
 390   1      }
 391          
 392          //--------------------------------------------------
 393          // Description   : Fill 6 Color ICM Data
 394          // Input Value   : pucICMData --> Point to ICM uvoffset
 395          //                 ucCMSel --> Color selected
 396          //                   ucLoadSelect --> Axis selected
 397          // Output Value  : None
 398          //--------------------------------------------------
 399          void ScalerColorSixColorICMLoad(BYTE *pucICMData, BYTE ucCMSel, BYTE ucLoadSelect)
 400          {
 401   1          ScalerSetBit(P7_D1_ICM_SEL, ~(_BIT2 | _BIT1 | _BIT0), ucCMSel);
 402   1      
 403   1          switch(ucLoadSelect)
C51 COMPILER V8.12   RL6432_SERIES_COLORSIXCOLORADJUST                                     05/25/2022 15:41:33 PAGE 8   

 404   1          {
 405   2              // Rightbuffer
 406   2              case 0:
 407   2                  ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_33_PORT_CMN_RBUF_00_DU_H);
 408   2                  break;
 409   2      
 410   2              // Rightwidth
 411   2              case 1:
 412   2                  ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_13_PORT_CMN_RWID_00_DU_H);
 413   2                  break;
 414   2      
 415   2              // Center
 416   2              case 2:
 417   2                  ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_03_PORT_CMN_MST_00_DU_H);
 418   2                  break;
 419   2      
 420   2              // Leftwidth
 421   2              case 3:
 422   2                  ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_23_PORT_CMN_LWID_00_DU_H);
 423   2                  break;
 424   2      
 425   2              // Leftbuffer
 426   2              case 4:
 427   2                  ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_43_PORT_CMN_LBUF_00_DU_H);
 428   2                  break;
 429   2      
 430   2              default:
 431   2                  ScalerSetByte(P7_D2_ICM_ADDR, _P7_D3_PT_23_PORT_CMN_LWID_00_DU_H);
 432   2                  break;
 433   2          }
 434   1      
 435   1          ScalerBurstWrite(pucICMData, _SIXCOLOR_TABLE_SIZE_AXIS, GET_CURRENT_BANK_NUMBER(), P7_D3_ICM_DATA, _BU
             -RSTWRITE_DATA_COMMON, _BURSTWRITE_FROM_XRAM);
 436   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1849    ----
   CONSTANT SIZE    =    774    ----
   XDATA SIZE       =   ----      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
