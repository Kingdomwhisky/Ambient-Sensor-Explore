C51 COMPILER V8.12   RL6432_SERIES_COLORDCCNORMALIZEFACTORADJU                             05/25/2022 15:41:25 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE RL6432_SERIES_COLORDCCNORMALIZEFACTORADJU
OBJECT MODULE PLACED IN .\Output\RL6432_Series_ColorDCCNormalizeFactorAdjust.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\RL6432_Series_Color\RL6432_Series_ColorDCCNormalizeFactorAdjust.c LARG
                    -E OPTIMIZE(9,SPEED) INCDIR(..\..\..\Common;..\Header;.\Header;..\..\ScalerFunction\Lib\Header;..\..\ScalerFunction\Heade
                    -r;..\..\ScalerCommonFunction\Lib\Header;..\..\ScalerCommonFunction\Header;..\..\RL6432_Series_Common\Lib\Header;..\..\RL
                    -6432_Series_Common\Header) DEFINE(_TRANSLATOR_SUPPORT=_OFF,_SCALER_TYPE=_RL6432_SERIES) DEBUG OBJECTEXTEND PRINT(.\Outpu
                    -t\RL6432_Series_ColorDCCNormalizeFactorAdjust.lst) OBJECT(.\Output\RL6432_Series_ColorDCCNormalizeFactorAdjust.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2012>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : RL6432_Series_ColorDCCNormalizeFactorAdjust.c
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          #include "RL6432_Series_ColorLibInternalInclude.h"
  20          
  21          //****************************************************************************
  22          // DEFINITIONS / MACROS
  23          //****************************************************************************
  24          
  25          
  26          //****************************************************************************
  27          // STRUCT / TYPE / ENUM DEFINITTIONS
  28          //****************************************************************************
  29          
  30          
  31          //****************************************************************************
  32          // CODE TABLES
  33          //****************************************************************************
  34          
  35          
  36          //****************************************************************************
  37          // VARIABLE DECLARATIONS
  38          //****************************************************************************
  39          
  40          
  41          //****************************************************************************
  42          // FUNCTION DECLARATIONS
  43          //****************************************************************************
  44          void ScalerColorDCCNormalizeFactorAdjust(void);
  45          
  46          
  47          //****************************************************************************
  48          // FUNCTION DEFINITIONS
  49          //****************************************************************************
  50          //--------------------------------------------------
  51          // Description  : Adjust Normalize Factor
C51 COMPILER V8.12   RL6432_SERIES_COLORDCCNORMALIZEFACTORADJU                             05/25/2022 15:41:25 PAGE 2   

  52          // Input Value  : None
  53          // Output Value : None
  54          //--------------------------------------------------
  55          void ScalerColorDCCNormalizeFactorAdjust(void)
  56          {
  57   1          WORD usHWidth = 0;
  58   1          WORD usVHeight = 0;
  59   1          WORD usHStart = 0;
  60   1          WORD usHEnd = 0;
  61   1          WORD usVStart = 0;
  62   1          WORD usVEnd = 0;
  63   1          BYTE ucBorder = 0;
  64   1      
  65   1          // Check if highlight window on
  66   1          if(ScalerGetDataPortBit(P0_60_HLW_ADDR_PORT, _P0_61_PT_0C_HLW_BORDER_EN, _BIT0) != 0x00)
  67   1          {
  68   2              // Get highlight window type
  69   2              switch(ScalerGetDataPortBit(P0_60_HLW_ADDR_PORT, _P0_61_PT_0E_HLW_CONTROL0, (_BIT3 | _BIT2)))
  70   2              {
  71   3                  // Full region
  72   3                  case 0x00:
  73   3      
  74   3                      usHWidth = g_stMDomainOutputData.usHWidth;
  75   3                      usVHeight = g_stMDomainOutputData.usVHeight;
  76   3                      PDATA_DWORD(0) = ((DWORD)16777216 * 255 / usHWidth / usVHeight) & 0xffffff;
  77   3                      break;
  78   3      
  79   3                  // Inside window
  80   3                  case _BIT2:
  81   3      
  82   3                      ScalerSetBit(P0_60_HLW_ADDR_PORT, ~(_BIT4 | _BIT3 | _BIT2 | _BIT1 | _BIT0), 0x00);
  83   3                      usHStart = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA
             -_PORT));
  84   3                      usHEnd = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA_P
             -ORT));
  85   3                      usVStart = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA
             -_PORT));
  86   3                      usVEnd = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA_P
             -ORT));
  87   3                      ucBorder = ScalerGetByte(P0_61_HLW_DATA_PORT);
  88   3                      usHWidth = usHEnd + ucBorder - usHStart;
  89   3                      usVHeight = usVEnd + ucBorder - usVStart;
  90   3                      PDATA_DWORD(0) = ((DWORD)16777216 * 255 / usHWidth / usVHeight) & 0xffffff;
  91   3                      break;
  92   3      
  93   3                  // Outside window
  94   3                  case _BIT3:
  95   3      
  96   3                      ScalerSetBit(P0_60_HLW_ADDR_PORT, ~(_BIT4 | _BIT3 | _BIT2 | _BIT1 | _BIT0), 0x00);
  97   3                      usHStart = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA
             -_PORT));
  98   3                      usHEnd = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA_P
             -ORT));
  99   3                      usVStart = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA
             -_PORT));
 100   3                      usVEnd = (WORD)(ScalerGetByte(P0_61_HLW_DATA_PORT) << 8) | (ScalerGetByte(P0_61_HLW_DATA_P
             -ORT));
 101   3                      ucBorder = ScalerGetByte(P0_61_HLW_DATA_PORT);
 102   3                      usHWidth = usHEnd + ucBorder - usHStart;
 103   3                      usVHeight = usVEnd + ucBorder - usVStart;
 104   3      
 105   3                      // Calculate Outside Count
C51 COMPILER V8.12   RL6432_SERIES_COLORDCCNORMALIZEFACTORADJU                             05/25/2022 15:41:25 PAGE 3   

 106   3                      PDATA_DWORD(1) = ((DWORD)(g_stMDomainOutputData.usHWidth) * (DWORD)(g_stMDomainOutputData.
             -usVHeight)) - (DWORD)usHWidth * (DWORD)usVHeight;
 107   3                      PDATA_DWORD(0) = ((DWORD)16777216 * 255 / PDATA_DWORD(1)) & 0xffffff;
 108   3                      break;
 109   3      
 110   3                  default:
 111   3      
 112   3                      usHWidth = g_stMDomainOutputData.usHWidth;
 113   3                      usVHeight = g_stMDomainOutputData.usVHeight;
 114   3                      PDATA_DWORD(0) = ((DWORD)16777216 * 255 / usHWidth / usVHeight) & 0xffffff;
 115   3                      break;
 116   3              }
 117   2          }
 118   1          else
 119   1          {
 120   2              usHWidth = g_stMDomainOutputData.usHWidth;
 121   2              usVHeight = g_stMDomainOutputData.usVHeight;
 122   2              PDATA_DWORD(0) = ((DWORD)16777216 * 255 / usHWidth / usVHeight) & 0xffffff;
 123   2          }
 124   1      
 125   1          ScalerSetBit(P7_C7_DCC_CTRL_0, ~(_BIT1 | _BIT0), _PAGE0);
 126   1          ScalerSetByte(P7_C9_DCC_ADDRESS_PORT, _P7_CA_PT_00_PORT_PAGE0_NOR_FACTOR_H);
 127   1      
 128   1          ScalerTimerPollingFlagProc(20, P7_C8_DCC_CTRL_1, _BIT6, 1);
 129   1      
 130   1          ScalerWrite(P7_CA_DCC_DATA_PORT, 3, &pData[1], _NON_AUTOINC);
 131   1      }
 132          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    480    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
